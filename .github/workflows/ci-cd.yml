name: CI/CD Pipeline - Hydraulic Monitoring MLOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for model retraining check
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/hydraulic-monitor

jobs:
  # ========================================
  # JOB 1: Code Quality & Linting
  # ========================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint
    
    - name: Run Black (Code Formatter)
      run: black --check .
      continue-on-error: true
    
    - name: Run isort (Import Sorter)
      run: isort --check-only .
      continue-on-error: true
    
    - name: Run Flake8 (Linter)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run Pylint
      run: |
        pip install -r requirements.txt
        pylint app.py --exit-zero

  # ========================================
  # JOB 2: Unit Tests
  # ========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run Unit Tests
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html -v
      continue-on-error: true
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ========================================
  # JOB 3: Model Validation
  # ========================================
  model-validation:
    name: Validate ML Models
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Check Model Files
      run: |
        if [ -d "models" ]; then
          echo "Models directory found"
          ls -lah models/
        else
          echo "No models directory - will train during deployment"
        fi
    
    - name: Validate Model Schema
      run: |
        python -c "
        import os
        import joblib
        if os.path.exists('models'):
            for f in os.listdir('models'):
                if f.endswith('.pkl'):
                    print(f'Validating {f}')
                    model = joblib.load(os.path.join('models', f))
                    print(f'  Type: {type(model)}')
        " || echo "No models to validate"

  # ========================================
  # JOB 4: Security Scan
  # ========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ========================================
  # JOB 5: Build Docker Image
  # ========================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, model-validation]
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # JOB 6: Deploy to Staging
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.hydraulic-monitor.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your deployment commands here (e.g., kubectl, helm, etc.)
    
    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests here

  # ========================================
  # JOB 7: Deploy to Production
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://hydraulic-monitor.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        # Add your deployment commands here
    
    - name: Health Check
      run: |
        echo "Performing health check..."
        # Add health check commands

  # ========================================
  # JOB 8: Model Monitoring
  # ========================================
  model-monitoring:
    name: Model Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Check Model Drift
      run: |
        echo "Checking for model drift..."
        # Add model drift detection logic
    
    - name: Send Monitoring Report
      run: |
        echo "Sending monitoring report..."
        # Add notification logic (Slack, email, etc.)

  # ========================================
  # JOB 9: Notification
  # ========================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Deployment Status
      run: |
        echo "Pipeline Status: ${{ job.status }}"
        echo "Deployment completed!"
        # Add Slack/Teams/Email notification here

