version: '3.8'

services:
  # ========================================
  # Streamlit Application
  # ========================================
  streamlit-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hydraulic-monitor-app
    ports:
      - "8501:8501"
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.hydraulic.app=streamlit"
      - "com.hydraulic.environment=development"

  # ========================================
  # MLflow Tracking Server
  # ========================================
  mlflow:
    image: python:3.9-slim
    container_name: hydraulic-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./mlflow-artifacts:/mlflow-artifacts
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
             mlflow server 
             --backend-store-uri sqlite:///mlruns/mlflow.db
             --default-artifact-root /mlflow-artifacts
             --host 0.0.0.0
             --port 5000"
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "com.hydraulic.app=mlflow"
      - "com.hydraulic.environment=development"

  # ========================================
  # Prometheus (Monitoring)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: hydraulic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "com.hydraulic.app=prometheus"
      - "com.hydraulic.environment=development"

  # ========================================
  # Grafana (Visualization)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: hydraulic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "com.hydraulic.app=grafana"
      - "com.hydraulic.environment=development"

  # ========================================
  # FastAPI Backend (Optional - for REST API)
  # ========================================
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: hydraulic-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./api_logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - API_PORT=8000
    restart: unless-stopped
    networks:
      - mlops-network
    depends_on:
      - streamlit-app
    labels:
      - "com.hydraulic.app=api"
      - "com.hydraulic.environment=development"

networks:
  mlops-network:
    driver: bridge
    name: hydraulic-mlops-network

volumes:
  prometheus-data:
    name: hydraulic-prometheus-data
  grafana-data:
    name: hydraulic-grafana-data

